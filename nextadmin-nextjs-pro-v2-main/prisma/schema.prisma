// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // luego: "postgresql"
  url      = env("DATABASE_URL")
}

/// -----------------------
///  Enums nuevos
/// -----------------------
enum LinkType {
  WEBSITE
  EMAIL
  GITHUB
  GITLAB
  LINKEDIN
  X
  FACEBOOK
  INSTAGRAM
  TIKTOK
  YOUTUBE
  TWITCH
  DISCORD
  WHATSAPP
  TELEGRAM
  OTHER
}

/// -----------------------
///  RBAC básico
/// -----------------------
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Perfil público
  avatarUrl String?
  coverUrl  String?
  bio       String?

  // relaciones varias (tu esquema original)
  interests     UserInterest[]
  links         UserLink[]
  roles         UserRole[]
  alumno        PerfilAlumno? // 0..1
  tutor         PerfilTutor?
  docente       PerfilDocente?
  deporte       PerfilDeporte?
  posts         Post[]
  comments      Comment[]
  forums        Forum[]            @relation("ForumAuthor")
  events        DeporteEvento[]    @relation("EventsCreatedBy")
  notifications Notification[]
  pushSubs      PushSubscription[]
  enrollments   Enrollment[]
  EventoSub     EventoSub[]
}

model Role {
  id    Int        @id @default(autoincrement())
  code  String     @unique // ADMIN | ALUMNO | TUTOR | DOCENTE | DEPORTE
  name  String
  users UserRole[]
}

model UserRole {
  userId    String
  roleId    Int
  grantedAt DateTime @default(now())
  grantedBy String? // userId del admin (opcional)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Restrict)

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

/// -----------------------
///  Perfiles por rol
/// -----------------------
model PerfilAlumno {
  id       String  @id @default(cuid())
  boleta   String  @unique
  programa String?
  semestre Int?
  grupo    String?

  // Lado "definidor" de la relación 1:1 -> la FK debe ser única
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([boleta])
}

model PerfilTutor {
  userId       String  @id
  especialidad String?
  cupoMax      Int?
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PerfilDocente {
  userId       String  @id
  departamento String?
  categoria    String?
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PerfilDeporte {
  userId          String  @id
  area            String?
  telefono        String?
  horarioAtencion String?
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// -----------------------
///  Cursos e Inscripciones
/// -----------------------
model Course {
  id          String   @id @default(cuid())
  clave       String   @unique
  nombre      String
  descripcion String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  enrollments Enrollment[]
  forums      Forum[]
}

model Enrollment {
  id       String @id @default(cuid())
  userId   String
  courseId String
  rolCurso String @default("ALUMNO") // ALUMNO | DOCENTE | AYUDANTE

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

/// -----------------------
///  Foros, Posts, Comentarios
/// -----------------------
enum ForumType {
  GENERAL
  CURSO
  DEPORTES
}

model Forum {
  id          String    @id @default(cuid())
  type        ForumType
  courseId    String?
  deporteArea String?
  title       String
  description String?
  createdAt   DateTime  @default(now())

  // (opcional) autor/owner del foro
  authorId String?
  author   User?   @relation("ForumAuthor", fields: [authorId], references: [id])

  course        Course?         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  posts         Post[]
  DeporteEvento DeporteEvento[]

  @@index([type])
  @@index([courseId])
}

model Post {
  id        String   @id @default(cuid())
  forumId   String
  authorId  String
  title     String
  body      String
  tags      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  forum    Forum     @relation(fields: [forumId], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Restrict)
  comments Comment[]

  @@index([forumId])
  @@index([authorId])
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
  body      String
  createdAt DateTime @default(now())

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Restrict)

  @@index([postId])
  @@index([authorId])
}

/// -----------------------
///  Deportes: eventos + suscripciones
/// -----------------------
model DeporteEvento {
  id          String    @id @default(cuid())
  forumId     String
  title       String
  description String?
  lugar       String?
  iniciaAt    DateTime
  terminaAt   DateTime?
  cupoMax     Int?
  createdBy   String
  createdAt   DateTime  @default(now())

  forum  Forum @relation(fields: [forumId], references: [id], onDelete: Cascade)
  author User  @relation("EventsCreatedBy", fields: [createdBy], references: [id], onDelete: Restrict)

  subs EventoSub[]

  @@index([forumId])
  @@index([iniciaAt])
}

model EventoSub {
  id           String   @id @default(cuid())
  eventoId     String
  userId       String
  subscribedAt DateTime @default(now())

  evento DeporteEvento @relation(fields: [eventoId], references: [id], onDelete: Cascade)
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventoId, userId])
  @@index([userId])
}

/// -----------------------
///  Notificaciones + WebPush
/// -----------------------
model Notification {
  id        String   @id @default(cuid())
  userId    String
  tipo      String
  title     String?
  body      String?
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  userAgent String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

/// -----------------------
///  NUEVO: Intereses (etiquetas)
/// -----------------------
model Interest {
  id    Int            @id @default(autoincrement())
  slug  String         @unique // ej: "futbol", "videojuegos", "ajedrez"
  label String
  users UserInterest[]
}

model UserInterest {
  userId     String
  interestId Int
  addedAt    DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interest Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)

  @@id([userId, interestId])
  @@index([userId])
  @@index([interestId])
}

/// -----------------------
///  NUEVO: Enlaces relacionados
/// -----------------------
model UserLink {
  id        String   @id @default(cuid())
  userId    String
  type      LinkType
  url       String
  username  String? // handle/usuario (opcional)
  label     String? // etiqueta visible (opcional)
  isPublic  Boolean  @default(true)
  order     Int? // para ordenar en el perfil
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // evita duplicados evidentes por tipo+url para el mismo usuario
  @@unique([userId, type, url])
  @@index([userId])
}
